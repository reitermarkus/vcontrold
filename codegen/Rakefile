require "active_support"
require "active_support/core_ext"
require 'json'
require 'nokogiri'
require 'pathname'
require 'yaml'

Dir.chdir __dir__

ActiveSupport::Inflector.inflections(:en) do |inflect|
  inflect.acronym 'A1M1'
  inflect.acronym 'M2'
end

class Pathname
  alias to_str to_s
end

class Hash
  def sort_by_key
    map { |k, v| [k, v.is_a?(Hash) ? v.sort_by_key : v] }.sort_by { |k,| k }.to_h
  end
end

VITOSOFT_DIR = Pathname('Vitosoft300SID1_Setup')
VITOSOFT_EXE = 'Vitosoft300SID1_Setup.exe'

DEFINITIONS            = VITOSOFT_DIR/'data/OFFLINE/1477A66B/9BDD2692/DPDefinitions.xml'
DATAPOINT_TYPES        = VITOSOFT_DIR/'data/OFFLINE/3C8BB38F/67C8D997/ecnDataPointType.xml'
EVENT_TYPES_XML        = VITOSOFT_DIR/'data/OFFLINE/3C8BB38F/67C8D997/ecnEventType.xml'
SYSTEM_EVENT_TYPES_XML = VITOSOFT_DIR/'data/OFFLINE/3C8BB38F/67C8D997/sysEventType.xml'
TEXT_RESOURCES_GLOB    = VITOSOFT_DIR/'data/OFFLINE/C6C1A272/BF368101/Textresource_*.xml'
RELEASE_NOTES          = VITOSOFT_DIR/'data/OFFLINE/C6C1A272/69ADA3A4/ReleaseNotes_en.htm'

TRANSLATIONS_RAW = 'translations_raw.yml'
DEVICES = 'devices.yml'
SYSTEM_EVENT_TYPES = 'system_event_types.yml'
EVENT_TYPES = 'event_types.yml'
VITOSOFT_VERSION = 'vitosoft_version.yml'
MAPPINGS_UNIQUE = 'mappings_unique.yml'
TRANSLATIONS_UNIQUE = 'translations_unique.yml'

file VITOSOFT_EXE do |t|
  # https://connectivity.viessmann.com/de-de/mp_rt/vitosoft.html
  sh 'curl',
     '--continue-at', '-',
     '--remote-time',
     '-L', 'https://connectivity.viessmann.com/content/dam/vi-micro/CONNECTIVITY/Vitosoft/Vitosoft300SID1_Setup.exe/_jcr_content/renditions/original.media_file.download_attachment.file/Vitosoft300SID1_Setup.exe',
     '-o', t.name
end

file VITOSOFT_VERSION => RELEASE_NOTES do |t|
  /Release\s+(?<version>\d+\.\d+\.\d+\.\d+)\s+\((?<day>\d+)\.(?<month>\d+)\.(?<year>\d+)\)/ =~ File.read(t.source)
  File.write t.name, {version: version, release_date: "#{year}-#{month}-#{day}"}.to_yaml
end

rule %r{#{Regexp.escape(VITOSOFT_DIR)}/(.*)} => VITOSOFT_EXE do |t|
  next unless Dir.glob(t.name).empty? || t.name == (VITOSOFT_DIR/'*').to_s

  sh '7z', 'x', '-y', "-o#{VITOSOFT_DIR}", t.source, Pathname(t.name).relative_path_from(VITOSOFT_DIR)

  Dir.glob(t.name).each do |path|
    next unless File.extname(path) == '.xml'
    sh 'xmllint', '--format', path, '--output', path
  end
end

task :extract_all => VITOSOFT_DIR/'*'

file TRANSLATIONS_RAW => TEXT_RESOURCES_GLOB do |t|
  next if File.exist?(t.name)

  languages = {}
  translations = {}

  Pathname.glob(t.source).each do |text_resource|
    reader = Nokogiri::XML::Reader(text_resource.open)

    reader.each do |node|
      case node.name
      when 'Culture'
        id = node.attribute('Id')
        name = node.attribute('Name')

        languages[id] ||= name
      when 'TextResource'
        language_id = node.attribute('CultureId')
        label = node.attribute('Label')
        value = node.attribute('Value').strip.gsub('##ecnnewline##', "\n").gsub('##ecntab##', "\t").gsub('##ecnsemicolon##', ';').gsub('##nl##', "\n")

        translations[label] ||= {}
        translations[label][languages.fetch(language_id)] = value
      end
    end
  end

  File.write t.name, translations.sort_by_key.to_yaml
end

task :commands => DEVICES

file DEVICES => DATAPOINT_TYPES do |t|
  devices = {}

  reader = Nokogiri::XML::Reader(File.open(t.source))

  reader.each do |node|
    if node.name == 'DataPointType'
      node = Nokogiri::XML(node.outer_xml)

      if device = node.at('./DataPointType/ID')&.text&.strip
        devices[device] = node.at('./DataPointType/EventTypeList')&.text&.strip.split(';')
      end
    end
  end

  dummy_types = devices.delete('ecnStatusDataPoint')
  devices = devices.map { |k, v| [k, v - dummy_types] }.to_h

  File.write t.name, devices.to_yaml
end

def event_types(path)
  reader = Nokogiri::XML::Reader(File.open(path))

  reader.map { |node|
    next if node.empty_element?
    next unless node.name == 'EventType'

    node = Nokogiri::XML(node.outer_xml)

    next unless id = node.at('ID')&.text

    [
      id,
      node.at('./EventType').children.map { |n|
        value = case name = n.name.underscore
        when 'address', 'vitocom_channel_id'
          n.text.empty? ? nil : Integer(n.text, 16)
        when /^(block|byte|bit)_(length|position)$/
          Integer(n.text)
        when /^conversion_(factor|offset)$/
          v = Float(n.text)
          v == 0.0 ? nil : v
        when /^((lower|upper)_border|stepping)$/
          Float(n.text)
        when 'access_mode'
          n.text.empty? ? nil : n.text.underscore
        when /^fc_(read|write)$/
          {
            ''                           => nil,
            'undefined'                  => nil,
            'Virtual_MarktManager_READ'  => 'virtual_market_manager_read',
            'Virtual_MarktManager_WRITE' => 'virtual_market_manager_write',
          }.fetch(n.text, n.text.underscore)
        when 'option_list'
          n.text.split(';')
        when 'value_list'
          n.text.split(';').map { |v| v.split('=', 2) }.map { |(k, v)| [k.to_i, v.strip] }.to_h
        when /^prefix_(read|write)$/
          n.text.empty? ? nil : n.text.each_char.each_slice(2).map { |c| Integer(c.join, 16) }
        else
          n.text
        end

        name = name.to_sym

        next if name.in?([:text, :id])
        next if value.nil?

        [name, value]
      }.compact.to_h,
    ]
  }.compact.to_h
end

file EVENT_TYPES => EVENT_TYPES_XML do |t|
  File.write t.name, event_types(t.source).to_yaml
end

file SYSTEM_EVENT_TYPES => SYSTEM_EVENT_TYPES_XML do |t|
  File.write t.name, event_types(t.source).to_yaml
end

task :diff => DEVICES do |t|
  devices = YAML.safe_load(File.read(t.source))

  v200kw2 = devices.fetch('V200KW2')
  v200kw2_6 = devices.fetch('V200KW2_6')

  puts "Devices:"
  puts devices.keys
  puts


  puts "V200KW2 only:"
  puts v200kw2 - v200kw2_6

  puts


  puts "V200KW2_6 only:"
  puts v200kw2_6 - v200kw2

  puts

  puts "Both V200KW2 & V200KW2_6"
  puts v200kw2 & v200kw2_6

end

file MAPPINGS_UNIQUE => TRANSLATIONS_UNIQUE do |t|
  translations = YAML.safe_load(File.read(t.sources.first), [Symbol]).fetch(:mapping)

  mappings = {}

  translations.each do |k, translation|
    if /^viessmann\.eventvaluetype\.(?<id>.*)~(?<value>.*)$/ =~ k
      mappings[id] ||= {}
      mappings[id][value.to_i] = translation
    elsif /^(?<id>viessmann\.errorcode\.[^.]+)\.(?<value>..)$/ =~ k
      mappings[id] ||= {}
      mappings[id][value.to_i(16)] = translation
    end
  end

  File.write t.name, create_mapping_to_unique(mappings).to_yaml
end

task :check_error_mappings => MAPPINGS_UNIQUE do |t|
  mappings = YAML.safe_load(File.read(t.source))

  codes = {}

  mappings.each do |k, v|
    next unless /^viessmann\.errorcode\.(?<id>[^.]+)$/ =~ k

    v.each do |value, translation|
      if previous = codes[value]
        next if previous == translation

        $stderr.puts translation

        next if "#{id}.#{value}".in?(['CU401B_S.41', 'Ecotronic.218'])

        raise "Differing value for #{id}.#{value}"
      else
        codes[value] = translation
      end
    end
  end
end

def create_mapping_to_unique(input)
  reversed = {}

  input.each do |k, v|
    reversed[v] ||= []
    reversed[v] << k
    reversed[v] = reversed[v].sort.uniq
  end

  mapping = {}
  combined = {}

  reversed.each do |k, v|
    require 'digest'

    new_id = Digest::MD5.hexdigest(v.sort_by(&:length).first)

    v.each do |old_id|
      mapping[old_id] = new_id
    end

    combined[new_id] = k
  end

  {
    mapping: mapping,
    translations: combined,
  }.sort_by_key
end

file TRANSLATIONS_UNIQUE => TRANSLATIONS_RAW do |t|
  translations = YAML.safe_load(File.read(t.sources.first))
  File.write t.name, create_mapping_to_unique(translations).to_yaml
end

rule '.yml' => [TRANSLATIONS_RAW, DEVICES, MAPPINGS_UNIQUE, DEFINITIONS, EVENT_TYPES, SYSTEM_EVENT_TYPES] do |t|
  device = Pathname(t.name).sub_ext('').to_s

  translations = YAML.safe_load(File.read(TRANSLATIONS_RAW))

  mappings = YAML.safe_load(File.read(MAPPINGS_UNIQUE), [Symbol])

  commands = YAML.safe_load(File.read(DEVICES)).fetch(device)

  types = YAML.safe_load(File.read(EVENT_TYPES), [Symbol]).select { |k,| commands.include?(k) }.to_h
  sys_types = YAML.safe_load(File.read(SYSTEM_EVENT_TYPES), [Symbol])

  types = sys_types.merge(types)

  File.open("#{__dir__}/#{t.name}", 'w+') do |f|
    f.puts 'device:'
    f.puts "  protocol: #{device =~ /kw2/i ? 'Kw2' : 'P300'}"

    f.puts

    f.puts 'commands:'
    types.each do |type_id, type|
      type_id = type_id.sub(/\~0x[0-9A-F]{4}\Z/, '')

      id = type_id

      exact_mappings = {
        'BedienBetriebsartA1M1'                         => 'operating_mode_a1m1',
        'BedienBetriebsartM2'                           => 'operating_mode_m2',
        'Geraetekennung_Diode'                          => 'device_identification',
        'Gemischte_AT'                                  => 'outside_temperature_adjusted',
        'TiefpassTemperaturwert_ATS'                    => 'outside_temperature_lowpass',
        'ADC_IstTemperaturwert_ATS'                     => 'outside_temperature_actual',
        'ADC_IstTemperaturwert_AGTS'                    => 'exhaust_temperature_actual',
        'ADC_Isttemperaturwert_KTS'                     => 'boiler_temperature_actual',
        'TiefpassTemperaturwert_STS1'                   => 'dhw_temperature_lowpass',
        'ADC_IstTemperaturwert_STS1'                    => 'dhw_temperature_actual',
        'TemperaturFehler_STS1'                         => 'dhw_temperature_error',
        'Bedien_WW_Solltemperatur'                      => 'dhw_temperature_desired',
        'TemperaturFehler_AGTS'                         => 'exhaust_temperature_error',
        'TiefpassTemperaturwert_AGTS'                   => 'exhaust_temperature_lowpass',
        'AGTemperaturwertMAXBedienFunktionReset'        => 'exhaust_temperature_max_achieved_reset',
        'BedienRTSolltemperaturReduziertA1M1'           => 'room_temperature_desired_reduced_a1m1',
        'BedienRTSolltemperaturReduziertM2'             => 'room_temperature_desired_reduced_m2',
        'BedienRTSolltemperaturA1M1'                    => 'room_temperature_desired_a1m1',
        'BedienRTSolltemperaturM2'                      => 'room_temperature_desired_m2',
        'HK_RaumsolltemperaturaktuellA1M1'              => 'room_temperature_desired_effective_a1m1',
        'HK_RaumsolltemperaturaktuellM2'                => 'room_temperature_desired_effective_m2',
        'TiefpassTemperatur_RTS_A1M1'                   => 'room_temperature_lowpass_a1m1',
        'TiefpassTemperaturwert_RTS_M2'                 => 'room_temperature_lowpass_m2',
        'TiefpassTemperaturwert_KTS_A1'                 => 'flow_temperature_lowpass_a1m1',
        'HK_VT_Solltemperatur_A1M1'                     => 'flow_temperature_desired_a1m1',
        'HK_VT_Solltemperatur_M2'                       => 'flow_temperature_desired_m2',
        'VorlauftemperaturM2'                           => 'flow_temperature_actual_m2',
        'TemperaturFehler_17_NR1'                       => 'return_temperature_error_status',
        'TiefpassTemperaturwert_17_NR1'                 => 'return_temperature_lowpass_nr1',
        'RuecklauftemperaturM2'                         => 'return_temperature_actual_m2',
        'TemperaturFehler_2_NR1'                        => 'flow_temperature_error_status',
        'TiefpassTemperaturwert_2_NR1'                  => 'flow_temperature_lowpass_nr1',
        'WW_SolltemperaturAktuell'                      => 'dhw_temperature_desired_effective',
        'Zubringerpumpe'                                => 'feed_pump',
        'HK_AktuelleBetriebsartA1M1'                    => 'heating_circuit_operating_mode_effective_a1m1',
        'HK_AktuelleBetriebsartM2'                      => 'heating_circuit_operating_mode_effective_m2',
        'FerienBeginnA1M1'                              => 'holiday_departure_date_a1m1',
        'FerienBeginnM2'                                => 'holiday_departure_date_m2',
        'FerienEndeA1M1'                                => 'holiday_return_date_a1m1',
        'FerienEndeM2'                                  => 'holiday_return_date_m2',
        'Brennertyp_aktuell'                            => 'burner_type_effective',
        'Brennerstarts'                                 => 'burner_starts',
        'BedienSparbetriebA1M1'                         => 'economy_mode_a1m1',
        'BedienSparbetriebM2'                           => 'economy_mode_m2',
        'BedienPartybetriebA1M1'                        => 'party_mode_a1m1',
        'BedienPartybetriebM2'                          => 'party_mode_m2',
        'BedienRTSoll_PartyA1M1'                        => 'party_mode_temperature_desired_a1m1',
        'BedienRTSoll_PartyM2'                          => 'party_mode_temperature_desired_m2',
        'BedienNiveauA1M1'                              => 'heating_curve_level_a1m1',
        'BedienNiveauM2'                                => 'heating_curve_level_m2',
        'BedienNeigungA1M1'                             => 'heating_curve_slope_a1m1',
        'BedienNeigungM2'                               => 'heating_curve_slope_m2',
        'TemperaturFehler_KTS'                          => 'boiler_temperature_error_status',
        'VT_SollKesselA1M1_NR1'                         => 'boiler_temperature_desired_a1m1_nr1',
        'VT_SollKesselM2_NR1'                           => 'boiler_temperature_desired_m2_nr1',
        'TiefpassTemperaturwert_KTS'                    => 'boiler_temperature_lowpass',
        'Absenkzeit_gelerntM2'                          => 'setback_period_experience_based',
        'AGTemperaturwertMAX'                           => 'exhaust_temperature_max_achieved',
        'AGTemperaturwertMAXBedien'                     => 'exhaust_temperature_max',
        'Aufheizgradient_gelerntA1M1'                   => 'heat_up_gradient_experience_based_a1m1',
        'Aufheizgradient_gelerntM2'                     => 'heat_up_gradient_experience_based_m2',
        'BetriebsstundenBrenner1Bedienung'              => 'burner_hours_stage_1',
        'BetriebsstundenBrenner1BedienungFunktionReset' => 'burner_hours_stage_1_reset',
        'BetriebsstundenBrenner2Bedienung'              => 'burner_hours_stage_2',
        'BetriebsstundenBrenner2BedienungFunktionReset' => 'burner_hours_stage_2_reset',
        'BrennerstartsFunktionReset'                    => 'burner_starts_reset',
        'HK_FerienbetriebA1M1'                          => 'holiday_program_a1m1',
        'HK_FerienbetriebM2'                            => 'holiday_program_m2',
        'HK_Frostgefahr_aktivA1M1'                      => 'frost_risk_a1m1',
        'HK_Frostgefahr_aktivM2'                        => 'frost_risk_m2',
        'HK_PumpenzustandA1M1'                          => 'heating_circuit_pump_a1m1',
        'HK_PumpenzustandM2'                            => 'heating_circuit_pump_m2',
        'HK_ReglervarianteA1M1'                         => 'controller_version_a1m1',
        'HK_ReglervarianteA1M1_NR1'                     => 'controller_version_a1m1_nr1',
        'HK_ReglervarianteM2'                           => 'controller_version_m2',
        'HK_ReglervarianteM2_NR1'                       => 'controller_version_m2_nr1',
        'Uhrzeit'                                       => 'date_time',
        'AutomaticFlag_WWA1M1'                          => 'dhw_switching_times_mode_a1m1',
        'AutomaticFlag_WWM2'                            => 'dhw_switching_times_mode_m2',
        'AutomaticFlag_ZPA1M1'                          => 'dhw_circulation_pump_switching_times_mode_a1m1',
        'Schaltzeiten_A1M1_ZP'                          => 'dhw_circulation_pump_switching_times_a1m1',
        'AutomaticFlag_ZPM2'                            => 'dhw_circulation_pump_switching_times_mode_m2',
        'Schaltzeiten_M2_ZP'                            => 'dhw_circulation_pump_switching_times_m2',
        'Schaltzeiten_A1M1_WW'                          => 'dhw_switching_times_a1m1',
        'Schaltzeiten_M2_WW'                            => 'dhw_switching_times_m2',
        'Schaltzeiten_A1M1_HK'                          => 'heating_circuit_switching_times_a1m1',
        'Schaltzeiten_M2_HK'                            => 'heating_circuit_switching_times_m2',
        'WW_Status_NR1'                                 => 'dhw_status_nr1',
        'TiefpassTemperaturwert_VTS'                    => 'flow_temperature_adjusted',
        'DigitalAusgang_Zirkulationspumpe'              => 'circulation_pump_status',
        'DigitalAusgang_Speicherladepumpe'              => 'storage_tank_charging_pump_status',
        'DigitalAusgang_Brenner'                        => 'burner_stage_1_status',
        'DigitalAusgang_Benner2'                        => 'burner_stage_2_status',
        'DigitalEingang_BrennerStoerung'                => 'burner_fault_status',
        'HK_AufheiztimerA1M1'                           => 'heating_circuit_heat_up_phase_timer_a1m1',
        'HK_AufheiztimerM2'                             => 'heating_circuit_heat_up_phase_timer_m2',
        'HK_PumpenbefehlA1M1'                           => 'heating_circuit_pump_command_status_a1m1',
        'HK_PumpenbefehlM2'                             => 'heating_circuit_pump_command_status_m2',
        'HK_SchnellkorrekturA1M1'                       => 'heating_circuit_quick_correction_a1m1',
        'HK_SchnellkorrekturM2'                         => 'heating_circuit_quick_correction_m2',
        'TemperaturFehler_ATS'                          => 'outside_temperature_error_status',
        'SystemIdent_SX'                                => 'device_group',
        'Sachnummer'                                    => 'part_number',
        'KesselSolltemperaturwert'                      => 'boiler_temperature_desired',
        'DigitalAusgang_21'                             => 'digital_output_21',
        'DigitalAusgang_28'                             => 'digital_output_28',
        'HK_WW_Freigabe_vonA1M1'                        => 'dhw_release_a1m1',
        'HK_WW_Freigabe_vonM2'                          => 'dhw_release_m2',
        'D_Ausgang20_M2'                                => 'digital_output_20_m2',
        'ecnsysFehlerhistorie0'                         => 'system_error_history_0',
        'ecnsysFehlerhistorie1'                         => 'system_error_history_1',
        'ecnsysFehlerhistorie2'                         => 'system_error_history_2',
        'ecnsysFehlerhistorie3'                         => 'system_error_history_3',
        'ecnsysFehlerhistorie4'                         => 'system_error_history_4',
        'ecnsysFehlerhistorie5'                         => 'system_error_history_5',
        'ecnsysFehlerhistorie6'                         => 'system_error_history_6',
        'ecnsysFehlerhistorie7'                         => 'system_error_history_7',
        'ecnsysFehlerhistorie8'                         => 'system_error_history_8',
        'ecnsysFehlerhistorie9'                         => 'system_error_history_9',
        'DigitalAusgang_20'                             => 'digital_output_20',
        'DigitalAusgang_52Auf'                          => 'digital_output_52_open',
        'DigitalAusgang_52Zu'                           => 'digital_output_52_closed',
        'FB_A1_SW_Index'                                => 'remote_control_software_index_a1m1',
        'FB_M2_SW_Index'                                => 'remote_control_software_index_m2',
        'Oelverbrauch'                                  => 'fuel_consumption',
        'Oelverbrauch_Reset'                            => 'fuel_consumption_reset',
        'Nachtkontakt_HKPA1'                            => 'heating_circuit_pump_night_contact_a1m1',
        'Nachtkontakt_HKPM2'                            => 'heating_circuit_pump_night_contact_m2',
        'ResetCounter'                                  => 'reset_counter',
        'RelaistestV200KW2_NR1'                         => 'relay_test_v200kw2_nr1',
      }

      id = if exact_mappings.key?(id)
        exact_mappings.fetch(id)
      else
        id
      end

      addr = type.fetch(:address)
      factor = begin
        conversion = type[:conversion]
        factor = type[:conversion_factor]
        offset = type[:conversion_offset]

        case conversion
        when 'NoConversion', nil then nil
        when 'Div10' then 10
        when 'Div1000' then 1000
        when 'Sec2Hour' then 3600
        when 'Mult2' then 0.5
        when 'Mult5' then 0.2
        when 'Mult10' then 0.1
        when 'MultOffset' then
          factor.to_f * (10 ** offset.to_f)
        when 'DateBCD' then nil
        when 'DateTimeBCD' then nil
        when 'RotateBytes' then nil
        when 'HourDiffSec2Hour' then nil
        when 'UTCDiff2Month' then nil
        when 'HexByte2AsciiByte' then nil
        when 'Estrich' then nil
        when 'FixedStringTerminalZeroes' then nil
        else
          raise "No factor for conversion '#{conversion}'."
        end
      end
      mode = type.fetch(:access_mode)

      unit = case unit = [type[:sdk_data_type], type[:parameter]]
      when ['DateTime', 'Array']
        'systime'
      when ['Int', 'Byte']
        'u8'
      when ['Int', 'Int']
        'u16'
      when ['Int', 'Int4']
        "u#{8 * 4}"
      when ['Double', 'Byte']
        "u#{8 * type.fetch(:byte_length)}"
      when ['Double', 'Int']
        "u#{8 * type.fetch(:byte_length)}"
      when ['Double', 'SInt']
        "i#{8 * type.fetch(:byte_length)}"
      when ['Double', 'SByte']
        "i#{8 * type.fetch(:byte_length)}"
      when ['Double', 'Array']
        "u#{8 * type.fetch(:byte_length)}"
      when ['ByteArray', 'Array']
        "u#{8 * type.fetch(:byte_length)}"
      when ["ByteArray", "Int"]
        'u32'
      when ['ByteArray', 'Byte']
        'u8'
      when ['ByteArray', 'String']
        "u#{8 * type.fetch(:byte_length)}"
      else
        raise "No unit for #{unit} for #{type_id}."
      end
      mapping = type.fetch(:value_list, {})
      block_length = type.fetch(:block_length)
      byte_length = type.fetch(:byte_length)
      byte_position = type.fetch(:byte_position)
      bit_length = type.fetch(:bit_length)
      bit_position = type.fetch(:bit_position)

      type_translations = translations.fetch("viessmann.eventtype.name.#{type_id}", {})

      f.puts "  # #{type_translations.fetch('de')}" unless type_translations.empty?
      f.puts "  # #{type_translations.fetch('en')}" unless type_translations.empty?
      f.puts "  #{id}: # #{type_id}"
      f.puts "    addr: 0x#{addr.to_s(16).rjust(4, '0')}"
      f.puts "    mode: #{mode}"
      f.puts "    unit: #{unit}" unless unit.nil?
      f.puts "    factor: #{factor}" unless factor.nil?
      f.puts "    block_len: #{block_length}"  unless block_length.zero?
      f.puts "    byte_len: #{byte_length}"    unless byte_length.zero?
      f.puts "    byte_pos: #{byte_position}"  unless byte_position.zero?
      f.puts "    bit_len: #{bit_length}"      unless bit_length.zero?
      f.puts "    bit_pos: #{bit_position}"    unless bit_position.zero?

      if !mapping.empty? || type_id =~ /ecnsysFehlerhistorie\d/
        translation_id = case type_id
        when 'ecnsysLONCommunicationModul', 'ecnsysLONCommunicationModulWP'
          'NRF_K76_KonfiKommunikationsmodul'
        when 'ecnsysLONErrorManager'
          'K79_KonfiFehlerManagerV300_V333'
        when /ecnsysFehlerhistorie\d/
          "viessmann.errorcode.#{device}"
        else
          type_id
        end

        f.puts "    mapping: #{mappings.fetch(:mapping).fetch(translation_id)}"
      end
      f.puts
    end
  end
end

def conversion_to_type(conversion, factor, offset)
  return conversion if factor.nil? && offset.nil?

  if conversion == 'MultOffset' && !factor.nil? && offset.nil?
    if factor == (integer_factor = Integer(factor))
      return "Mult#{integer_factor}"
    end
  end

  raise "Conversion #{[conversion, factor, offset]} is not implemented."
end

file 'conversion.rs' => [EVENT_TYPES, SYSTEM_EVENT_TYPES] do |t|
  types = YAML.safe_load(File.read(EVENT_TYPES), [Symbol])
  sys_types = YAML.safe_load(File.read(SYSTEM_EVENT_TYPES), [Symbol])

  all_types = types.merge(sys_types)

  all_types = all_types.delete_if { |_, type|
    keep = false

    if type[:fc_read] && type[:fc_read] == 'virtual_read'
      keep = true
    end

    if type[:fc_write] && type[:fc_write] == 'virtual_write'
      keep = true
    end

    !keep
  }

  conversions = all_types.map { |_, type|
    conversion_to_type(
      type.fetch(:conversion, 'NoConversion'),
      type.fetch(:conversion_factor, nil),
      type.fetch(:conversion_offset, nil),
    )
  }.uniq.sort

  conversion_factors = all_types.map { |_, type| type.fetch(:conversion_factor, 'NoConversionFactor') }.uniq.sort_by(&:to_s)
  conversion_offsets = all_types.map { |_, type| type.fetch(:conversion_offset, 0.0) }.uniq.sort_by(&:to_s)

  File.open(t.name, 'w+') do |f|
    conversions.each do |conversion|
      f.puts "pub struct #{conversion};"
    end
  end
end

file 'sdk_data_types.rs' => [EVENT_TYPES, SYSTEM_EVENT_TYPES] do |t|
  types = YAML.safe_load(File.read(EVENT_TYPES), [Symbol])
  sys_types = YAML.safe_load(File.read(SYSTEM_EVENT_TYPES), [Symbol])

  all_types = types.merge(sys_types)
  all_types = all_types.delete_if { |_, type|
    keep = false

    if type[:fc_read] && type[:fc_read] == 'virtual_read'
      keep = true
    end

    if type[:fc_write] && type[:fc_write] == 'virtual_write'
      keep = true
    end

    !keep
  }

  sdk_data_types = all_types.map { |_, type| [type[:sdk_data_type], type[:parameter]].compact.join('_') }.compact.uniq.sort

  puts sdk_data_types
end
